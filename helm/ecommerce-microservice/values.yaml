# Default values for ecommerce-microservice.# Default values for ecommerce-microservice.# Default values for ecommerce-microservice.

# This is a YAML-formatted file.

# Declare variables to be substituted into your templates.# This is a YAML-formatted file.# This is a YAML-formatted file.



replicaCount: 1# Declare variables to be substituted into your templates.# Declare variables to be passed into your templates.



image:

  repository: nginx

  pullPolicy: IfNotPresent# Global configuration# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/

  tag: ""

global:replicaCount: 1

imagePullSecrets: []

nameOverride: ""  environment: "development"

fullnameOverride: ""

  registry: "localhost:5000"# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/

serviceAccount:

  create: trueimage:

  automount: true

  annotations: {}# Service configuration  repository: nginx

  name: ""

service:  # This sets the pull policy for images.

podAnnotations: {}

podLabels: {}  name: ""  pullPolicy: IfNotPresent



podSecurityContext: {}  type: ClusterIP  # Overrides the image tag whose default is the chart appVersion.



securityContext: {}  port: 80  tag: ""



service:  targetPort: 8080

  type: ClusterIP

  port: 80# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/

  targetPort: 8080

# Image configurationimagePullSecrets: []

env:

  SPRING_PROFILES_ACTIVE: "dev"image:# This is to override the chart name.



resources:  repository: ""nameOverride: ""

  limits:

    cpu: 500m  pullPolicy: IfNotPresentfullnameOverride: ""

    memory: 512Mi

  requests:  tag: "latest"

    cpu: 250m

    memory: 256Mi# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/



livenessProbe:# Deployment configurationserviceAccount:

  httpGet:

    path: /actuator/healthreplicaCount: 1  # Specifies whether a service account should be created

    port: http

  initialDelaySeconds: 90  create: true

  periodSeconds: 30

  timeoutSeconds: 10# Resource limits  # Automatically mount a ServiceAccount's API credentials?

  failureThreshold: 3

resources:  automount: true

readinessProbe:

  httpGet:  limits:  # Annotations to add to the service account

    path: /actuator/health/readiness

    port: http    cpu: 500m  annotations: {}

  initialDelaySeconds: 30

  periodSeconds: 10    memory: 512Mi  # The name of the service account to use.

  timeoutSeconds: 5

  failureThreshold: 3  requests:  # If not set and create is true, a name is generated using the fullname template



autoscaling:    cpu: 250m  name: ""

  enabled: false

  minReplicas: 1    memory: 256Mi

  maxReplicas: 100

  targetCPUUtilizationPercentage: 80# This is for setting Kubernetes Annotations to a Pod.



nodeSelector: {}# Environment variables# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/



tolerations: []env:podAnnotations: {}



affinity: {}  SPRING_PROFILES_ACTIVE: "dev"# This is for setting Kubernetes Labels to a Pod.



ingress:  # Database configuration will be set per service# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/

  enabled: false

  className: ""podLabels: {}

  annotations: {}

  hosts:# Health checks

    - host: chart-example.local

      paths:livenessProbe:podSecurityContext: {}

        - path: /

          pathType: Prefix  httpGet:  # fsGroup: 2000

  tls: []
    path: /actuator/health

    port: httpsecurityContext: {}

  initialDelaySeconds: 90  # capabilities:

  periodSeconds: 30  #   drop:

  timeoutSeconds: 10  #   - ALL

  failureThreshold: 3  # readOnlyRootFilesystem: true

  # runAsNonRoot: true

readinessProbe:  # runAsUser: 1000

  httpGet:

    path: /actuator/health/readiness# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/

    port: httpservice:

  initialDelaySeconds: 30  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types

  periodSeconds: 10  type: ClusterIP

  timeoutSeconds: 5  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports

  failureThreshold: 3  port: 80



# Service account# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/

serviceAccount:ingress:

  create: true  enabled: false

  annotations: {}  className: ""

  name: ""  annotations: {}

    # kubernetes.io/ingress.class: nginx

# Pod annotations    # kubernetes.io/tls-acme: "true"

podAnnotations: {}  hosts:

    - host: chart-example.local

# Pod security context      paths:

podSecurityContext: {}        - path: /

          pathType: ImplementationSpecific

# Security context  tls: []

securityContext: {}  #  - secretName: chart-example-tls

  #    hosts:

# Node selector  #      - chart-example.local

nodeSelector: {}

# -- Expose the service via gateway-api HTTPRoute

# Tolerations# Requires Gateway API resources and suitable controller installed within the cluster

tolerations: []# (see: https://gateway-api.sigs.k8s.io/guides/)

httpRoute:

# Affinity  # HTTPRoute enabled.

affinity: {}  enabled: false

  # HTTPRoute annotations.

# Autoscaling  annotations: {}

autoscaling:  # Which Gateways this Route is attached to.

  enabled: false  parentRefs:

  minReplicas: 1  - name: gateway

  maxReplicas: 100    sectionName: http

  targetCPUUtilizationPercentage: 80    # namespace: default

  # targetMemoryUtilizationPercentage: 80  # Hostnames matching HTTP header.

  hostnames:

# Ingress  - chart-example.local

ingress:  # List of rules and filters applied.

  enabled: false  rules:

  className: ""  - matches:

  annotations: {}    - path:

  hosts:        type: PathPrefix

    - host: chart-example.local        value: /headers

      paths:  #   filters:

        - path: /  #   - type: RequestHeaderModifier

          pathType: Prefix  #     requestHeaderModifier:

  tls: []  #       set:
  #       - name: My-Overwrite-Header
  #         value: this-is-the-only-value
  #       remove:
  #       - User-Agent
  # - matches:
  #   - path:
  #       type: PathPrefix
  #       value: /echo
  #     headers:
  #     - name: version
  #       value: v2

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
